<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-14T12:46:05+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">GameMakerHow</title><subtitle>Your GameMaker Questions, Answered
</subtitle><author><name>Gurpreet Singh Matharoo</name></author><entry><title type="html">How to clear the asset cache?</title><link href="http://localhost:4000/how-to-clear-the-asset-cache/" rel="alternate" type="text/html" title="How to clear the asset cache?" /><published>2020-04-14T00:00:00+05:30</published><updated>2020-04-14T00:00:00+05:30</updated><id>http://localhost:4000/how-to-clear-the-asset-cache</id><content type="html" xml:base="http://localhost:4000/how-to-clear-the-asset-cache/">&lt;p&gt;You might be getting weird graphical glitches, especially on the HTML5 platform. Clearing the asset compiler cache may sometimes fix these issues.&lt;/p&gt;

&lt;p&gt;In GMS2, you can clear the cache by pressing this button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gms2_cache_clear.jpg&quot; alt=&quot;Clear Cache&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In GMS1, the cache can be cleared with this button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gms1_cache_clear.jpg&quot; alt=&quot;Clear Cache&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Compile your game again after clearing the cache. If that doesn’t fix your issue, it’s probably something else.&lt;/p&gt;</content><author><name>Gurpreet Singh Matharoo</name></author><category term="clear" /><category term="asset" /><category term="compiler" /><category term="cache" /><category term="sprite" /><category term="error" /><category term="bug" /><category term="glitch" /><category term="html5" /><category term="web" /><summary type="html">You might be getting weird graphical glitches, especially on the HTML5 platform. Clearing the asset compiler cache may sometimes fix these issues.</summary></entry><entry><title type="html">How to change the color of a sprite?</title><link href="http://localhost:4000/how-to-change-the-color-of-a-sprite/" rel="alternate" type="text/html" title="How to change the color of a sprite?" /><published>2020-04-08T00:00:00+05:30</published><updated>2020-04-08T00:00:00+05:30</updated><id>http://localhost:4000/how-to-change-the-color-of-a-sprite</id><content type="html" xml:base="http://localhost:4000/how-to-change-the-color-of-a-sprite/">&lt;p&gt;The color of an instance can be changed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image_blend&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;image_blend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c_red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs2.yoyogames.com/source/_build/3_scripting/4_gml_reference/drawing/colour/index.html&quot;&gt;List of colors&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that this only &lt;strong&gt;multiplies&lt;/strong&gt; the color. So if your sprite is white, then it will appear red; but if it’s a darker color (say dark green) then the product of the original color (dark green) and the new color (red) will be the final result.&lt;/p&gt;

&lt;p&gt;The same parameter can also be found in the &lt;a href=&quot;https://docs2.yoyogames.com/source/_build/3_scripting/4_gml_reference/drawing/sprites_and_tiles/draw_sprite_ext.html&quot;&gt;draw_sprite_ext()&lt;/a&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;draw_sprite_ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*THIS*/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blend_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With a shader, you can override the RGB values of the sprite with the RGB values of the blend color:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;gl_FragColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rgb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v_vColour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way, if your blend color is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c_red&lt;/code&gt;, then all pixels in the sprite will actually turn red (no matter what the original color is).&lt;/p&gt;</content><author><name>Gurpreet Singh Matharoo</name></author><category term="change" /><category term="color" /><category term="sprite" /><category term="object" /><category term="instance" /><category term="blend" /><category term="multiply" /><category term="colorize" /><category term="set" /><category term="modify" /><category term="shaders" /><category term="tint" /><summary type="html">The color of an instance can be changed with image_blend.</summary></entry><entry><title type="html">How to use scripts? (2.2.5)</title><link href="http://localhost:4000/how-to-use-scripts/" rel="alternate" type="text/html" title="How to use scripts? (2.2.5)" /><published>2020-04-08T00:00:00+05:30</published><updated>2020-04-08T00:00:00+05:30</updated><id>http://localhost:4000/how-to-use-scripts</id><content type="html" xml:base="http://localhost:4000/how-to-use-scripts/">&lt;p&gt;Scripts allow you to create custom functions. You can call your script function, pass in arguments, run some code in it, and expect a result; just like a regular built-in function.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This will change once version 2.3 is out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// @desc is_player_dead&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// @arg player&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argument0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a script function that checks if a player is dead. You pass in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;player&lt;/code&gt; instance as an argument; it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; if that player’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hp&lt;/code&gt; is equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, otherwise, it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This function can be called and the return value can be stored in a variable:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// Example: in a for() loop&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_is_dead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is_player_dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_is_dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;show_debug_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Player &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is dead.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gurpreet Singh Matharoo</name></author><category term="scripts" /><category term="functions" /><category term="methods" /><category term="call" /><summary type="html">Scripts allow you to create custom functions. You can call your script function, pass in arguments, run some code in it, and expect a result; just like a regular built-in function.</summary></entry><entry><title type="html">How to handle tile collisions?</title><link href="http://localhost:4000/how-to-handle-tile-collisions/" rel="alternate" type="text/html" title="How to handle tile collisions?" /><published>2020-04-07T00:00:00+05:30</published><updated>2020-04-07T00:00:00+05:30</updated><id>http://localhost:4000/how-to-handle-tile-collisions</id><content type="html" xml:base="http://localhost:4000/how-to-handle-tile-collisions/">&lt;p&gt;Tile collisions only allow the first tile in a tileset to be the “empty” tile:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/tilemaps.png&quot; alt=&quot;Tilemap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When using auto-tiling, make sure to set that tile as the “empty” tile.&lt;/p&gt;

&lt;p&gt;Now you need to get the tilemap ID when the room starts:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// Room Start&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;col_tilemap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;layer_tilemap_get_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Layer Name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can then make a script/function that takes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hsp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vsp&lt;/code&gt; (x/y speeds) as parameters, and returns whether there’s a tile collision where the instance is moving:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;tilemap_get_at_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;col_tilemap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bbox_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_hsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bbox_top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_vsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;tilemap_get_at_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;col_tilemap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bbox_right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_hsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bbox_top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_vsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;tilemap_get_at_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;col_tilemap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bbox_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_hsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bbox_bottom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_vsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;tilemap_get_at_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;col_tilemap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bbox_right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_hsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bbox_bottom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_vsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re checking all four corners of the bounding box (with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hsp&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vsp&lt;/code&gt; added) for collisions on the tilemap.&lt;/p&gt;

&lt;p&gt;This function can be used with the collision system demonstrated &lt;a href=&quot;/how-to-handle-object-collisions/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that if your instance’s mask is larger than a particular block of tiles, then your instance may be able to go through them.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Gurpreet Singh Matharoo</name></author><category term="tile" /><category term="tilemap" /><category term="collisions" /><category term="wall" /><summary type="html">Tile collisions only allow the first tile in a tileset to be the “empty” tile:</summary></entry><entry><title type="html">How to do depth-ordering?</title><link href="http://localhost:4000/how-to-do-depth-ordering/" rel="alternate" type="text/html" title="How to do depth-ordering?" /><published>2020-04-06T00:00:00+05:30</published><updated>2020-04-06T00:00:00+05:30</updated><id>http://localhost:4000/how-to-do-depth-ordering</id><content type="html" xml:base="http://localhost:4000/how-to-do-depth-ordering/">&lt;p&gt;To make sure that objects are drawn in the correct order, when making a top view game, you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;depth&lt;/code&gt; variable.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// End Step&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://docs2.yoyogames.com/source/_build/3_scripting/4_gml_reference/instances/instance_variables/depth.html&quot;&gt;depth&lt;/a&gt; controls the draw order of the instances, so which instance appears in the front and which appears in the back is dependent on that draw order.&lt;/p&gt;

&lt;p&gt;Instances with higher depth values are drawn first, and so they’re below instances with lower depth values.
An instance with a depth of 500 would be &lt;strong&gt;below&lt;/strong&gt; an instance with a depth of -200.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gmhow-depth.png&quot; alt=&quot;Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So when you set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;depth&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-y&lt;/code&gt;, you’re making sure that instances are ordered based on their vertical position.&lt;/p&gt;

&lt;p&gt;It is recommended to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bbox_bottom&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;, so that the “foot” of each instance becomes its center point for depth ordering.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bbox_bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gurpreet Singh Matharoo</name></author><category term="depth" /><category term="order" /><category term="ordering" /><category term="z" /><category term="test" /><category term="top" /><category term="down" /><category term="front" /><category term="back" /><summary type="html">To make sure that objects are drawn in the correct order, when making a top view game, you can use the depth variable.</summary></entry><entry><title type="html">How to code a timer?</title><link href="http://localhost:4000/how-to-code-a-timer/" rel="alternate" type="text/html" title="How to code a timer?" /><published>2020-04-03T00:00:00+05:30</published><updated>2020-04-03T00:00:00+05:30</updated><id>http://localhost:4000/how-to-code-a-timer</id><content type="html" xml:base="http://localhost:4000/how-to-code-a-timer/">&lt;p&gt;You can use &lt;a href=&quot;https://docs2.yoyogames.com/source/_build/3_scripting/4_gml_reference/instances/instance_variables/alarm.html&quot;&gt;Alarms&lt;/a&gt; to run code after some time or on a loop.&lt;/p&gt;

&lt;p&gt;Let’s say you set Alarm 0 to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;30&lt;/code&gt;, in the Create event of an object:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// Create&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alarm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since one second has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;60&lt;/code&gt; steps, the Alarm 0 event should run after half a second.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// Alarm 0 event&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After half a second, the speed of the instance will be increased by 1.&lt;/p&gt;

&lt;p&gt;If you set the alarm again inside the same Alarm event, it’ll create a loop:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;alarm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From that point on, the alarm will run every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;60&lt;/code&gt; steps – which is one second. This creates a 1-second interval loop.&lt;/p&gt;</content><author><name>Gurpreet Singh Matharoo</name></author><category term="make" /><category term="code" /><category term="timer" /><category term="interval" /><category term="run" /><category term="on" /><category term="a" /><category term="an" /><summary type="html">You can use Alarms to run code after some time or on a loop.</summary></entry><entry><title type="html">How to handle object collisions?</title><link href="http://localhost:4000/how-to-handle-object-collisions/" rel="alternate" type="text/html" title="How to handle object collisions?" /><published>2020-04-03T00:00:00+05:30</published><updated>2020-04-03T00:00:00+05:30</updated><id>http://localhost:4000/how-to-handle-object-collisions</id><content type="html" xml:base="http://localhost:4000/how-to-handle-object-collisions/">&lt;p&gt;To enable collisions in a moving object, you can do this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Set the movement speed (usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hsp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vsp&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Check if there are collisions where you’re moving (separately on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;If a collision is found on either dimension, you set that dimension’s speed to 0
    &lt;ul&gt;
      &lt;li&gt;Before setting it to 0, you run a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; loop to close any gap between the two colliding instances&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using the simple &lt;a href=&quot;https://docs2.yoyogames.com/source/_build/3_scripting/4_gml_reference/movement%20and%20collisions/collisions/place_meeting.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;place_meeting()&lt;/code&gt;&lt;/a&gt; function, the code would look something like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// Step event&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Set speed&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;hsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;move_speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;vsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;move_speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Check collisions: X&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;place_meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj_wall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Close the gap with a while loop&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;place_meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj_wall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Stop&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;hsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Check collisions: Y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;place_meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj_wall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Close the gap with a while loop&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;place_meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj_wall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Stop&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;vsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Finally, apply movement&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gurpreet Singh Matharoo</name></author><category term="how" /><category term="to" /><category term="handle" /><category term="make" /><category term="do" /><category term="collisions" /><category term="collide" /><category term="stop" /><category term="wall" /><category term="objects" /><category term="instances" /><summary type="html">To enable collisions in a moving object, you can do this: Set the movement speed (usually hsp and vsp) Check if there are collisions where you’re moving (separately on x and y) If a collision is found on either dimension, you set that dimension’s speed to 0 Before setting it to 0, you run a while loop to close any gap between the two colliding instances</summary></entry><entry><title type="html">How to handle collisions?</title><link href="http://localhost:4000/how-to-handle-collisions/" rel="alternate" type="text/html" title="How to handle collisions?" /><published>2020-04-03T00:00:00+05:30</published><updated>2020-04-03T00:00:00+05:30</updated><id>http://localhost:4000/how-to-handle-collisions</id><content type="html" xml:base="http://localhost:4000/how-to-handle-collisions/">&lt;p&gt;Take a look at these pages:&lt;/p&gt;</content><author><name>Gurpreet Singh Matharoo</name></author><category term="how" /><category term="to" /><category term="handle" /><category term="make" /><category term="do" /><category term="enable" /><category term="collisions" /><category term="collide" /><category term="stop" /><category term="wall" /><summary type="html">Take a look at these pages:</summary></entry><entry><title type="html">How to animate an object?</title><link href="http://localhost:4000/how-to-animate-an-object/" rel="alternate" type="text/html" title="How to animate an object?" /><published>2020-03-30T00:00:00+05:30</published><updated>2020-03-30T00:00:00+05:30</updated><id>http://localhost:4000/how-to-animate-an-object</id><content type="html" xml:base="http://localhost:4000/how-to-animate-an-object/">&lt;p&gt;Take a look at these pages:&lt;/p&gt;</content><author><name>Gurpreet Singh Matharoo</name></author><category term="object" /><category term="animate" /><category term="animation" /><category term="move" /><category term="target" /><category term="control" /><category term="state" /><summary type="html">Take a look at these pages:</summary></entry><entry><title type="html">How to do smooth animations?</title><link href="http://localhost:4000/how-to-do-smooth-animations/" rel="alternate" type="text/html" title="How to do smooth animations?" /><published>2020-03-30T00:00:00+05:30</published><updated>2020-03-30T00:00:00+05:30</updated><id>http://localhost:4000/how-to-do-smooth-animations</id><content type="html" xml:base="http://localhost:4000/how-to-do-smooth-animations/">&lt;p&gt;Smooth animations can be done using the &lt;a href=&quot;https://docs2.yoyogames.com/source/_build/3_scripting/4_gml_reference/maths/number%20functions/lerp.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lerp&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;p&gt;Let’s say you want to animate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; position of an instance, but smoothly. For that, you’d first need “target” &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; values:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// Create&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;targetX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;targetY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;targetX&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;targetY&lt;/code&gt; to wherever you want the instance to move, and then have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; follow the target values, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lerp()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// Step&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Set target to mouse position&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;targetX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouse_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;targetY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouse_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Move x/y to targetX/Y by 10% (0.1)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lerp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lerp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gurpreet Singh Matharoo</name></author><category term="animation" /><category term="animating" /><category term="animations" /><category term="image" /><category term="speed" /><category term="frame" /><category term="state" /><category term="lerp" /><category term="smooth" /><category term="interpolation" /><summary type="html">Smooth animations can be done using the lerp function.</summary></entry></feed>